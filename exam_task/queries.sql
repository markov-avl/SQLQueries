-- Задача 3. База данных “Хроники восхождений” в альпинистском клубе.

-- В базе данных должны записываться даты начала и завершения каждого восхождения, имена и адреса участвовавших в нем
-- альпинистов, название и высота горы, страна и район, где эта гора расположена. Присвойте выразительные имена
-- таблицам и полям для хранения указанной информации. Написать запросы, осуществляющие следующие операции.

-- 1) Для введенного пользователем интервала дат показать список гор с указанием даты последнего восхождения. Для
-- каждой горы сформировать в хронологическом порядке список групп, осуществлявших восхождение.
-- 2) Предоставить возможность добавления новой вершины с указанием ее названия, высоты и страны местоположения.
-- 3) Предоставить возможность изменения данных о вершине, если на нее не было восхождения.
-- 4) Показать список альпинистов, осуществлявших восхождение в указанный интервал дат. Для каждого альпиниста вывести
-- список гор, на которые он осуществлял восхождения в этот период, с указанием названия группы и даты восхождения.
-- 5) Предоставить возможность добавления нового альпиниста в состав указанной группы.
-- 6) Показать информацию о количестве восхождений каждого альпиниста на каждую гору. При выводе список отсортировать
-- по количеству восхождений.
-- 7) Показать список восхождений (групп), которые осуществлялись в указанный пользователем период времени. Для
-- каждой группы показать ее состав.
-- 8) Предоставить возможность добавления новой группы, указав ее название, вершину, время начала восхождения.
-- 9) Предоставить информацию о том, сколько альпинистов побывало на каждой горе.


WITH all_records AS (SELECT *
                     FROM climbers
                              INNER JOIN groups on climbers.id = groups.climber_id
                              INNER JOIN climbing on climbing.id = groups.climbing_id)
SELECT *
FROM all_records ar1
WHERE (SELECT COUNT(*)
       FROM all_records ar2
       WHERE ar1 != ar2
         AND ar1.climber_id = ar2.climber_id
         AND (ar1.start_date BETWEEN ar2.start_date AND ar2.end_date OR
              ar1.end_date BETWEEN ar2.start_date AND ar2.end_date)) > 0
